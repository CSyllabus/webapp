[{"id": "CS 1", "name": " Introduction to Computer Programming", "ects": "9", "semester": null, "description": "A course on computer programming emphasizing the program design process and pragmatic programming skills. It will use the Python programming language and will not assume previous programming experience. Material covered will include data types, variables, assignment, control structures, functions, scoping, compound data, string processing, modules, basic input/output (terminal and file), as well as more advanced topics such as recursion, exception handling and object-oriented programming. Program development and maintenance skills including debugging, testing, and documentation will also be taught. Assignments will include problems drawn from fields such as graphics, numerics, networking, and games. At the end of the course, students will be ready to learn other programming languages in courses such as CS 11, and will also be ready to take more in-depth courses such as CS 2 and CS 4. Instructor: Vanier."},{"id": "CS 2", "name": " Introduction to Programming Methods", "ects": "9", "semester": null, "description": "CS 2 is a demanding course in programming languages and computer science. Topics covered include data structures, including lists, trees, and graphs; implementation and performance analysis of common algorithms; algorithm design principles, in particular recursion and dynamic programming; concurrency and network programming; basic numerical computation methods. Heavy emphasis is placed on the use of compiled languages and development tools, including source control and debugging. The course includes weekly laboratory exercises and written homework covering the lecture material and program design. The course is intended to establish a foundation for further work in many topics in the computer science option. Instructors: Staff.\u00a0"},{"id": "CS 3", "name": " Introduction to Software Engineering", "ects": "9", "semester": null, "description": " CS 3 is a practical introduction to software engineering with an emphasis on understanding and minimizing risk in large software projects. Students will work in teams on a course-long project. Topics covered include revision control, code reviews, testing and testability, code readability, API design, refactoring, and documentation. The course provides opportunities to present your work to the class, and emphasizes working with other people\u2019s code, both that of classmates and pre-existing frameworks. Not offered 2017\u201318.\u00a0"},{"id": "CS 4", "name": " Fundamentals of Computer Programming", "ects": "9", "semester": null, "description": " This course gives students the conceptual background necessary to construct and analyze programs, which includes specifying computations, understanding evaluation models, and using major programming language constructs (functions and procedures, conditionals, recursion and looping, scoping and environments, compound data, side effects, higher-order functions and functional programming, and object-oriented programming). It emphasizes key issues that arise in programming and in computation in general, including time and space complexity, choice of data representation, and abstraction management. This course is intended for students with some programming background who want a deeper understanding of the conceptual issues involved in computer programming. Instructor: Vanier."},{"id": "Ma/CS 6", "name": " Introduction to Discrete Mathematics", "ects": "9", "semester": null, "description": "For course description, see Mathematics.\u00a0"},{"id": "CS 9", "name": "\u00a0 Introduction to Computer Science Research", "ects": "1", "semester": null, "description": "This course will introduce students to research areas in CS through weekly overview talks by Caltech faculty and industry researchers aimed at first-year undergraduates. Others may wish to take the course to gain an understanding of the scope of research in computer science. Graded pass/fail.\u00a0Instructor: Ralph."},{"id": "CS 11", "name": " Computer Language Lab", "ects": "3", "semester": null, "description": "A self-paced lab that provides students with extra practice and supervision in transferring their programming skills to a particular programming language. The course can be used for any language of the student\u2019s choosing, subject to approval by the instructor. A series of exercises guide the student through the pragmatic use of the chosen language, building his or her familiarity, experience, and style. More advanced students may propose their own programming project as the target demonstration of their new language skills. This course is available for undergraduate students only. Graduate students should register for CS 111. CS 11 may be repeated for credit of up to a total of nine units. Instructors: Pinkston, Vanier."},{"id": "CS 21", "name": " Decidability and Tractability", "ects": "9", "semester": null, "description": "This course introduces the formal foundations of computer science, the fundamental limits of computation, and the limits of efficient computation. Topics will include automata and Turing machines, decidability and undecidability, reductions between computational problems, and the theory of NP-completeness. Instructor: Umans."},{"id": "CS 24", "name": " Introduction to Computing Systems", "ects": "9", "semester": null, "description": "Basic introduction to computer systems, including hardware-software interface, computer architecture, and operating systems. Course emphasizes computer system abstractions and the hardware and software techniques necessary to support them, including virtualization (e.g., memory, processing, communication), dynamic resource management, and common-case optimization, isolation, and naming. Instructor: Pinkston."},{"id": "CS 38", "name": " Algorithms", "ects": "9", "semester": null, "description": " This course introduces techniques for the design and analysis of efficient algorithms. Major design techniques (the greedy approach, divide and conquer, dynamic programming, linear programming) will be introduced through a variety of algebraic, graph, and optimization problems. Methods for identifying intractability (via NP-completeness) will be discussed. Instructor: Vidick."},{"id": "EE/CS 51", "name": " Principles of Microprocessor Systems", "ects": "12", "semester": null, "description": "For course description, see Electrical Engineering.\u00a0"},{"id": "EE/CS 52 ab", "name": " Microprocessor Systems Laboratory", "ects": "9", "semester": null, "description": "For course description, see Electrical Engineering.\u00a0"},{"id": "EE/CS 53", "name": " Microprocessor Project Laboratory", "ects": "12", "semester": null, "description": "For course description, see Electrical Engineering.\u00a0"},{"id": "CS/EE/ME 75", "name": "\u00a0Multidisciplinary Systems Engineering", "ects": "3", "semester": null, "description": "This course presents the fundamentals of modern multidisciplinary systems engineering in the context of a substantial design project. Students from a variety of disciplines will conceive, design, implement, and operate a system involving electrical, information, and mechanical engineering components. Specific tools will be provided for setting project goals and objectives, managing interfaces between component subsystems, working in design teams, and tracking progress against tasks. Students will be expected to apply knowledge from other courses at Caltech in designing and implementing specific subsystems. During the first two terms of the course, students will attend project meetings and learn some basic tools for project design, while taking courses in CS, EE, and ME that are related to the course project. During the third term, the entire team will build, document, and demonstrate the course design project, which will differ from year to year. Freshmen must receive permission from the lead instructor to enroll.\u00a0Instructor: Not offered 2017\u201318.\u00a0"},{"id": "CS 80", "name": " Undergraduate Thesis", "ects": "9", "semester": null, "description": " Individual research project, carried out under the supervision of a member of the computer science faculty (or other faculty as approved by the computer science undergraduate option representative). Projects must include significant design effort. Written report required. Open only to upperclass students. Not offered on a pass/fail basis. Instructor: Staff.\u00a0"},{"id": "CS 81", "name": " Undergraduate Projects in Computer Science", "ects": "Units are assigned in accordance with work accomplished. Prerequisites: Consent of supervisor is required before registering. ", "semester": null, "description": "Supervised research or development in computer science by undergraduates. The topic must be approved by the project supervisor, and a formal final report must be presented on completion of research. This course can (with approval) be used to satisfy the project requirement for the CS major. Graded pass/fail. Instructor: Staff."},{"id": "CS 87", "name": " Computational Literature", "ects": "9", "semester": null, "description": " "},{"id": "CS 90", "name": " Undergraduate Reading in Computer Science", "ects": "Units are assigned in accordance with work accomplished. Prerequisites: Consent of supervisor is required before registering. ", "semester": null, "description": "Supervised reading in computer science by undergraduates. The topic must be approved by the reading supervisor, and a formal final report must be presented on completion of the term. Graded pass/fail. Instructor: Staff."},{"id": "CS 101", "name": " Special Topics in Computer Science", "ects": "Units in accordance with work accomplished; offered by announcement. Prerequisites: CS 21 and CS 38, or instructor\u2019s permission. ", "semester": null, "description": "The topics covered vary from year to year, depending on the students and staff. Primarily for undergraduates.\u00a0"},{"id": "CS 102", "name": " Seminar in Computer Science", "ects": " 3, 6, or 9", "semester": null, "description": null},{"id": "CS 103", "name": " Reading in Computer Science", "ects": "3, 6, or 9", "semester": null, "description": null},{"id": "HPS/Pl/CS 110", "name": " Causation and Explanation", "ects": "9", "semester": null, "description": "For course description, see History and Philosophy of Science."},{"id": "CS 111", "name": " Programming Practicum", "ects": "3", "semester": null, "description": "A self-paced lab that provides students with extra practice and supervision in transferring their programming skills to a particular programming language. The course can be used for any language of the student\u2019s choosing, subject to approval by the instructor. A series of exercises guide the student through the pragmatic use of the chosen language, building his or her familiarity, experience, and style. More advanced students may propose their own programming project as the target demonstration of their new language skills. This course is available for graduate students only. Undergraduates should register for CS 11. Instructors: Pinkston, Vanier."},{"id": "Ec/ACM/CS 112", "name": " Bayesian Statistics", "ects": "9", "semester": null, "description": "See course description in Economics."},{"id": "ACM/CS 114", "name": " Parallel Algorithms for Scientific Applications", "ects": "9", "semester": null, "description": "For course description, see Applied and Computational Mathematics."},{"id": "CS 115", "name": " Functional Programming", "ects": "9", "semester": null, "description": "This course is a both a theoretical and practical introduction to functional programming, a paradigm which allows programmers to work at an extremely high level of abstraction while simultaneously avoiding large classes of bugs that plague more conventional imperative and object-oriented languages. The course will introduce and use the lazy functional language Haskell exclusively. Topics include: recursion, first-class functions, higher-order functions, algebraic data types, polymorphic types, function composition, point-free style, proving functions correct, lazy evaluation, pattern matching, lexical scoping, type classes, and modules. Some advanced topics such as monad transformers, parser combinators, dynamic typing, and existential types are also covered. Instructor: Vanier."},{"id": "CS 116", "name": " Reasoning about Program Correctness", "ects": "9", "semester": null, "description": " This course presents the use of logic and formal reasoning to prove the correctness of sequential and concurrent programs. Topics in logic include propositional logic, basics of first-order logic, and the use of logic notations for specifying programs. The course presents a programming notation and its formal semantics, Hoare logic and its use in proving program correctness, predicate transformers and weakest preconditions, and fixed-point theory and its application to proofs of programs. Instructor: Staff."},{"id": "Ma/CS 117", "name": " Computability Theory", "ects": "9", "semester": null, "description": "For course description, see Mathematics.\u00a0"},{"id": "CS 118", "name": " Logic Model Checking for Formal Software Verification", "ects": "9", "semester": null, "description": "An introduction to the theory and practice of logic model checking as an aid in the formal proofs of correctness of concurrent programs and system designs. The specific focus is on automata-theoretic verification. The course includes a study of the theory underlying formal verification, the correctness of programs, and the use of software tools in designs. Not offered 2017\u201318."},{"id": "CS 119", "name": " Reliable Software: Testing and Monitoring", "ects": "9", "semester": null, "description": " The class discusses theoretical and practical aspects of software testing and monitoring. Topics include finite state machine testing algorithms, random testing, constraint-based testing, coverage measures, automated debugging, logics and algorithms for runtime monitoring, and aspect-oriented approaches to monitoring. Emphasis is placed on automation. Students will be expected to develop and use software testing and monitoring tools to develop reliable software systems. Not offered 2017\u201318."},{"id": "CS/Ph 120", "name": " Quantum Cryptography", "ects": "9", "semester": null, "description": "This course is an introduction to quantum cryptography: how to use quantum effects, such as quantum entanglement and uncertainty, to implement cryptographic tasks with levels of security that are impossible to achieve classically. The course covers the fundamental ideas of quantum information that form the basis for quantum cryptography, such as entanglement and quantifying quantum knowledge. We will introduce the security definition for quantum key distribution and see protocols and proofs of security for this task. We will also discuss the basics of device-independent quantum cryptography as well as other cryptographic tasks and protocols, such as bit commitment or position-based cryptography. Not offered 2017\u201318."},{"id": "CS 121", "name": " Relational Databases", "ects": "9", "semester": null, "description": " Introduction to the basic theory and usage of relational database systems. It covers the relational data model, relational algebra, and the Structured Query Language (SQL). The course introduces the basics of database schema design and covers the entity-relationship model, functional dependency analysis, and normal forms. Additional topics include other query languages based on the relational calculi, data-warehousing and dimensional analysis, writing and using stored procedures, working with hierarchies and graphs within relational databases, and an overview of transaction processing and query evaluation. Extensive hands-on work with SQL databases. Instructor: Pinkston."},{"id": "CS 122", "name": " Database System Implementation", "ects": "9", "semester": null, "description": "This course explores the theory, algorithms, and approaches behind modern relational database systems. Topics include file storage formats, query planning and optimization, query evaluation, indexes, transaction processing, concurrency control, and recovery. Assignments consist of a series of programming projects extending a working relational database, giving hands-on experience with the topics covered in class. The course also has a strong focus on proper software engineering practices, including version control, testing, and documentation. Instructor: Pinkston."},{"id": "CS 123", "name": " Projects in Database Systems", "ects": "9", "semester": null, "description": "Students are expected to execute a substantial project in databases, write up a report describing their work, and make a presentation. Instructor: Pinkston."},{"id": "CS 124", "name": " Operating Systems", "ects": "12", "semester": null, "description": "This course explores the major themes and components of modern operating systems, such as kernel architectures, the process abstraction and process scheduling, system calls, concurrency within the OS, virtual memory management, and file systems. Students must work in groups to complete a series of challenging programming projects, implementing major components of an instructional operating system. Most programming is in C, although some IA32 assembly language programming is also necessary. Familiarity with the material in CS 24 is strongly advised before attempting this course. Instructor: Pinkston."},{"id": "EE/Ma/CS 126 ab", "name": " Information Theory", "ects": "9", "semester": null, "description": "For course description, see Electrical Engineering.\u00a0"},{"id": "EE/Ma/CS 127", "name": " Error-Correcting Codes", "ects": "9", "semester": null, "description": "For course description, see Electrical Engineering.\u00a0"},{"id": "CS/EE/Ma 129", "name": " Information and Complexity", "ects": "9", "semester": null, "description": "A basic course in information theory and computational complexity with emphasis on fundamental concepts and tools that equip the student for research and provide a foundation for pattern recognition and learning theory. "},{"id": "CS 131", "name": " Programming Languages", "ects": "9", "semester": null, "description": " CS 131 is a course on programming languages and their implementation. It teaches students how to program in a number of simplified languages representing the major programming paradigms in use today (imperative, object-oriented, and functional). It will also teach students how to build and modify the implementations of these languages. Emphasis will not be on syntax or parsing but on the essential differences in these languages and their implementations. Both dynamically-typed and statically-typed languages will be implemented. Relevant theory will be covered as needed. Implementations will mostly be interpreters, but some features of compilers will be covered if time permits. Enrollment limited to 20 students. Instructor: Vanier."},{"id": "ME/CS 133 ab", "name": " Robotics", "ects": "9", "semester": null, "description": " For course description, see Mechanical Engineering."},{"id": "CS/EE/ME 134", "name": " Autonomy", "ects": "9", "semester": null, "description": " This course covers the basics of autonomy at the intersection of computer vision, machine learning and robotics. It includes selected topics from each of these domains, and their integration points. The lectures will be accompanied by a project that will integrate these ideas on hardware and result in a final demonstration of the concepts studied in the course. Instructor: Staff."},{"id": "EE/CS/EST 135", "name": " Power System Analysis", "ects": "9", "semester": null, "description": "For course description, see Electrical Engineering."},{"id": "CS 138", "name": " Computer Algorithms", "ects": "9", "semester": null, "description": "Design and analysis of algorithms. Techniques for problems concerning graphs, flows, number theory, string matching, data compression, geometry, linear algebra and coding theory. Optimization, including linear programming. Randomization. Basic complexity theory and cryptography. Instructor: Vidick."},{"id": "CMS/CS 139", "name": " Analysis and Design of Algorithms", "ects": " 12", "semester": null, "description": "For course description, see Computation and Mathematical Sciences."},{"id": "CS 141", "name": " Hack Society: Projects from the Public Sector", "ects": "9", "semester": null, "description": "Extensive programming experience; completion of a medium sized project through either summer experience or other upper level courses. There is a large gap between the public and private sectors\u2019 effective use of technology. This gap presents an opportunity for the development of innovative solutions to problems faced by society. Students will develop technology based projects that address this gap. Course material will offer an introduction to the design, development, and analysis of digital technology with examples derived from services typically found in the public sector. Instructor: Ralph."},{"id": "CS 142", "name": " Distributed Computing", "ects": "9", "semester": null, "description": "Programming distributed systems. Mechanics for cooperation among concurrent agents. Programming sensor networks and cloud computing applications. Applications of machine learning and statistics by using parallel computers to aggregate and analyze data streams from sensors. Instructor: Murray/Chandy.\u00a0"},{"id": "CS/EE 143", "name": " Communication Networks", "ects": "9", "semester": null, "description": "This course focuses on the link layer (two) through the transport layer (four) of Internet protocols. It has two distinct components, analytical and systems. In the analytical part, after a quick summary of basic mechanisms on the Internet, we will focus on congestion control and explain: (1) How to model congestion control algorithms? (2) Is the model well defined? (3) How to characterize the equilibrium points of the model? (4) How to prove the stability of the equilibrium points? We will study basic results in ordinary differential equations, convex optimization, Lyapunov stability theorems, passivity theorems, gradient descent, contraction mapping, and Nyquist stability theory. We will apply these results to prove equilibrium and stability properties of the congestion control models and explore their practical implications. In the systems part, the students will build a software simulator of Internet routing and congestion control algorithms. The goal is not only to expose students to basic analytical tools that are applicable beyond congestion control, but also to demonstrate in depth the entire process of understanding a physical system, building mathematical models of the system, analyzing the models, exploring the practical implications of the analysis, and using the insights to improve the design. Not offered 2017\u201318."},{"id": "CMS/CS/EE 144", "name": " Networks: Structure Economics", "ects": "12", "semester": null, "description": "For course description, see Computing and Mathematical Sciences."},{"id": "CS/EE 145", "name": " Projects in Networking", "ects": "9", "semester": null, "description": "Students are expected to execute a substantial project in networking, write up a report describing their work, and make a presentation. Instructor: Wierman.\u00a0"},{"id": "CS/EE 146", "name": " Advanced Networking", "ects": "9", "semester": null, "description": "This is a research-oriented course meant for undergraduates and beginning graduate students who want to learn about current research topics in networks such as the Internet, power networks, social networks, etc. The topics covered in the course will vary, but will be pulled from current research topics in the design, analysis, control, and optimization of networks, protocols, and Internet applications. Usually offered in alternate years. Instructor: Low."},{"id": "EE/CNS/CS 148", "name": " Selected Topics in Computational Vision", "ects": " 9", "semester": null, "description": "For course description, see Electrical Engineering.\u00a0"},{"id": "CS/SS/Ec 149", "name": "\u00a0Algorithmic Economics", "ects": "9", "semester": null, "description": "This course will equip students to engage with active research at the intersection of social and information sciences, including: algorithmic game theory and mechanism design; auctions; matching markets; and learning in games. Instructors: Echenique/Pomatto."},{"id": "CS 150", "name": " Probability and Algorithms", "ects": " 9", "semester": null, "description": "Elementary randomized algorithms and algebraic bounds in communication, hashing, and identity testing. Game tree evaluation. Topics may include randomized parallel computation; independence, k-wise independence and derandomization; rapidly mixing Markov chains; expander graphs and their applications; clustering algorithms. Not offered 2017\u201318."},{"id": "CS 151", "name": " Complexity Theory", "ects": " 12", "semester": null, "description": "This course describes a diverse array of complexity classes that are used to classify problems according to the computational resources (such as time, space, randomness, or parallelism) required for their solution. The course examines problems whose fundamental nature is exposed by this framework, the known relationships between complexity classes, and the numerous open problems in the area. Not offered 2017\u201318."},{"id": "CS 153", "name": " Current Topics in Theoretical Computer Science", "ects": "9", "semester": null, "description": " May be repeated for credit, with permission of the instructor. Students in this course will study an area of current interest in theoretical computer science. The lectures will cover relevant background material at an advanced level and present results from selected recent papers within that year\u2019s chosen theme. Students will be expected to read and present a research paper. Instructor: Umans."},{"id": "CMS/CS/CNS/EE 155", "name": " Machine Learning Data Mining", "ects": " 12", "semester": null, "description": " For course description see Computing and Mathematical Sciences."},{"id": "CS/CNS/EE 156 ab", "name": " Learning Systems", "ects": "9", "semester": null, "description": "Introduction to the theory, algorithms, and applications of automated learning. How much information is needed to learn a task, how much computation is involved, and how it can be accomplished. Special emphasis will be given to unifying the different approaches to the subject coming from statistics, function approximation, optimization, pattern recognition, and neural networks. Instructor: Abu-Mostafa."},{"id": "ACM/CS 157", "name": " Introduction to Statistical Inference", "ects": "9", "semester": null, "description": "For course description, see Applied and Computational Mathematics."},{"id": "ACM/CS/EE 158", "name": "\u00a0Mathematical Statistics", "ects": "9", "semester": null, "description": "For course description, see Applied and Computational Mathematics."},{"id": "CS/CNS/EE 159", "name": " Advanced Topics in Machine Learning", "ects": "9", "semester": null, "description": " This course focuses on current topics in machine learning research. This is a paper reading course, and students are expected to understand material directly from research articles. Students are also expected to present in class, and to do a final project. Not offered 2017\u201318.."},{"id": "EE/CS 161", "name": " Big Data Networks", "ects": "9", "semester": null, "description": "For course description, see Electrical Engineering."},{"id": "EE/CS 167", "name": " Introduction to Data Compression and Storage", "ects": "9", "semester": null, "description": "For course description, see Electrical Engineering."},{"id": "CS/CNS 171", "name": " Computer Graphics Laboratory", "ects": "12", "semester": null, "description": "This is a challenging course that introduces the basic ideas behind computer graphics and some of its fundamental algorithms. Topics include graphics input and output, the graphics pipeline, sampling and image manipulation, three-dimensional transformations and interactive modeling, basics of physically based modeling and animation, simple shading models and their hardware implementation, and some of the fundamental algorithms of scientific visualization. Students will be required to perform significant implementations. Instructors: Barr.\u00a0"},{"id": "CS/CNS 174", "name": " Computer Graphics Projects", "ects": "12", "semester": null, "description": "This laboratory class offers students an opportunity for independent work including recent computer graphics research. In coordination with the instructor, students select a computer graphics modeling, rendering, interaction, or related algorithm and implement it. Students are required to present their work in class and discuss the results of their implementation and possible improvements to the basic methods. May be repeated for credit with instructor\u2019s permission. Instructors: Barr."},{"id": "CS 176", "name": "\u00a0Computer Graphics Research", "ects": "9", "semester": null, "description": "The course will go over recent research results in computer graphics, covering subjects from mesh processing (acquisition, compression, smoothing, parameterization, adaptive meshing), simulation for purposes of animation, rendering (both photo- and nonphotorealistic), geometric modeling primitives (image based, point based), and motion capture and editing. Other subjects may be treated as they appear in the recent literature. The goal of the course is to bring students up to the frontiers of computer graphics research and prepare them for their own research. Not offered 2017\u201318."},{"id": "CS 177 ab", "name": " Discrete Differential Geometry: Theory and Applications", "ects": "9", "semester": null, "description": " Working knowledge of multivariate calculus and linear algebra as well as fluency in some implementation language is expected. Subject matter covered: differential geometry of curves and surfaces, classical exterior calculus, discrete exterior calculus, sampling and reconstruction of differential forms, low dimensional algebraic and computational topology, Morse theory, Noether\u2019s theorem, Helmholtz-Hodge decomposition, structure preserving time integration, connections and their curvatures on complex line bundles. Applications include elastica and rods, surface parameterization, conformal surface deformations, computation of geodesics, tangent vector field design, connections, discrete thin shells, fluids, electromagnetism, and elasticity. Instructor: Schr\u00f6der."},{"id": "CS 178", "name": " Numerical Algorithms and their Implementation", "ects": "9", "semester": null, "description": "This course gives students the understanding necessary to choose and implement basic numerical algorithms as needed in everyday programming practice. Concepts include: sources of numerical error, stability, convergence, ill-conditioning, and efficiency. Algorithms covered include solution of linear systems (direct and iterative methods), orthogonalization, SVD, interpolation and approximation, numerical integration, solution of ODEs and PDEs, transform methods (Fourier, Wavelet), and low rank approximation such as multipole expansions Instructors: Desbrun, Schr\u00f6der, Hoffmann."},{"id": "CS 179", "name": " GPU Programming", "ects": "9", "semester": null, "description": " The use of Graphics Processing Units for computer graphics rendering is well known, but their power for general parallel computation is only recently being explored. Parallel algorithms running on GPUs can often achieve up to 100x speedup over similar CPU algorithms. This course covers programming techniques for the Graphics processing unit, focusing on visualization and simulation of various systems. Labs will cover specific applications in graphics, mechanics, and signal processing. The course will use nVidia\u2019s parallel computing architecture, CUDA. Labwork requires extensive programming. Instructor: Barr"},{"id": "CS 180", "name": " Master\u2019s Thesis Research", "ects": "Units (total of 45) are determined in accordance with work accomplished.\u00a0", "semester": null, "description": null},{"id": "CNS/Bi/EE/CS/NB 186", "name": " Vision: From Computational Theory to Neuronal Mechanisms", "ects": "12", "semester": null, "description": "For course description, see Computation and Neural Systems.\u00a0"},{"id": "CNS/Bi/Ph/CS/NB 187", "name": " Neural Computation", "ects": "9", "semester": null, "description": "For course description, see Computation and Neural Systems.\u00a0"},{"id": "BE/CS/CNS/Bi 191 ab", "name": " Biomolecular Computation", "ects": "9", "semester": null, "description": "For course description, see Bioengineering."},{"id": "BE/CS 196 ab", "name": " Design and Construction of Programmable Molecular Systems", "ects": "12", "semester": null, "description": "For course description, see Bioengineering."},{"id": "Ph/CS 219", "name": " Quantum Computation", "ects": "9", "semester": null, "description": "For course description, see Physics.\u00a0"},{"id": "SS/CS 241", "name": " Topics in Algorithmic Economics", "ects": "9", "semester": null, "description": "For course description, see Social Science."},{"id": "CS 274", "name": " Topics in Computer Graphics", "ects": "9", "semester": null, "description": "Each term will focus on some topic in computer graphics, such as geometric modeling, rendering, animation, human-computer interaction, or mathematical foundations. The topics will vary from year to year. May be repeated for credit with instructor\u2019s permission. Not offered 2017\u201318.\u00a0"},{"id": "CS 280", "name": " Research in Computer Science", "ects": "Units in accordance with work accomplished. Approval of student\u2019s research adviser and option adviser must be obtained before registering.\u00a0", "semester": null, "description": null},{"id": "CS 282", "name": " Reading in Computer Science", "ects": "6", "semester": null, "description": null},{"id": "CS 286", "name": " Seminar in Computer Science", "ects": "3, 6, or 9", "semester": null, "description": null},]